Two Sum
Solved 
Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.

You may assume that every input has exactly one pair of indices i and j that satisfy the condition.

Return the answer with the smaller index first.

Example 1:

Input: 
nums = [3,4,5,6], target = 7

Output: [0,1]
Explanation: nums[0] + nums[1] == 7, so we return [0, 1].

Example 2:

Input: nums = [4,5,6], target = 10

Output: [0,2]
Example 3:

Input: nums = [5,5], target = 10

Output: [0,1]
Constraints:

2 <= nums.length <= 1000
-10,000,000 <= nums[i] <= 10,000,000
-10,000,000 <= target <= 10,000,000

Solution: 
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:

        myset = set()

        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if (nums[i] + nums[j] == target):
                    return [i, j]
        
        return []  #This is the inefficient solution with time complexity O(n^2). Mainly did it to learn python looping

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        myset = {}

        for i in range(len(nums)):  # Need to iterate through the array
            remainder = target - nums[i]

            if remainder in myset:  # Proper indentation for this line
                return [myset[remainder], i]  # If I find the remainder in the hashmap, I return the indices

            myset[nums[i]] = i  # If I don't find the remainder, I continue with the iteration

        return []

This is the more efficient solution with O(n) time complexity. 
